{% extends "modules/contrib/paragraphs/templates/paragraph.html.twig" %}
{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set attributes = attributes.addClass('accordion module container collapse--alternate collapse--alternate-icon') %}
{% block paragraph %}
	{{ attach_library('danaher/accordion') }}

	<div {{ attributes.addClass(classes) }}>
		<div class="row">

			<div class="imagesection col-xxl-6">
				{% for item in paragraph.field_accordion_sections %}
                    {{ bamboo_render_entity('paragraph', item.entity.id(), 'accordion_alternate') }}
                {% endfor %}
			</div>
			<div class="col-xxl-5 offset-xxl-1">
				{{ content.field_eyebrow_text }}
				<div role="region" aria-label="{{ 'Accordion'|t }}">
					<div class="panel-group" role="tablist" aria-multiselectable="false">
					{{ content|without('field_eyebrow_text') }}
					</div>
				</div>
			</div>


		</div>

	</div>

{% endblock paragraph %}
